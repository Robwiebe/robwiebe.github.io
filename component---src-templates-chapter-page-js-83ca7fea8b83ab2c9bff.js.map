{"version":3,"sources":["webpack:///./src/components/Leaf/Leaf.js","webpack:///./src/contextAPI/dialog-context.js","webpack:///./src/components/Leaf/InterlinearLeaf.js","webpack:///./src/components/SourceName/SourceName.js","webpack:///./src/components/SpeechBubble/SpeechBubble.js","webpack:///./src/components/NarratorText/NarratorText.js","webpack:///./src/components/WordDataTable/WordDataTable.js","webpack:///./src/templates/ChapterPage.js"],"names":["Leaf","props","chapter","marks","find","mark","type","undefined","verse","classNames","styles","leaf","join","bibleRef","react_default","a","createElement","reference","data","book","className","text","DialogContext","React","createContext","open","content","InterlinearLeaf","dialog","useContext","updateDialog","obj","newDialog","interlinearLeaf","word_metadata","newLine","search","text1","substring","text2","Fragment","key","word_ID","whitespace","onClick","interlinearinterlinear","interlinearStrongs","StrongNumber","interlinearTranslation","IT","lineBreak","SourceName","sourceName","SpeechBubble","Interlinear","language","components_SourceName_SourceName","sourceData","source","speechbubble","color","leaves","map","Leaf_InterlinearLeaf","components_Leaf_Leaf","NarratorText","Table","dialogTable","rowData","row","book_id","chapter_id","verse_id","__webpack_exports__","_ref","segment","pageContext","_useState","useState","contentJSON","JSON","parse","style","width","margin","dialog_context","Provider","value","document","nodes","block","SVBData","components_NarratorText_NarratorText","components_SpeechBubble_SpeechBubble","primereact_dialog","header","visible","modal","onHide","WordDataTable","Object","entries"],"mappings":"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","file":"component---src-templates-chapter-page-js-83ca7fea8b83ab2c9bff.js","sourcesContent":["import React from 'react'\nimport styles from './Leaf.module.css'\n\nconst Leaf = (props) => {\n    // Create CSS styles from marks\n    const chapter = (props.marks) ? props.marks.find(mark => mark.type === 'chapter') : undefined\n    const verse = (props.marks) ? props.marks.find(mark => mark.type === 'verse') : undefined\n    const classNames = (verse !== undefined || chapter !== undefined) ? [(chapter !== undefined)?styles.chapter:null, (verse)?styles.verse:null, styles.leaf].join(' ') : styles.leaf\n    \n    // Create Bible references\n    let bibleRef = (verse) ? props.marks.find(mark => mark.type === 'reference') : undefined\n       if (bibleRef !== undefined) {\n        //  console.log(`bibleRef => ${bibleRef.data.book} ${bibleRef.data.chapter}:${bibleRef.data.verse}`)\n         return <span reference={`${bibleRef.data.book}.${bibleRef.data.chapter}.${bibleRef.data.verse}`} className={(classNames !== null) ? classNames : ''}>{props.text}</span>\n     } \n     // If not a verse, don't create a reference\n     else {\n        return <span className={(classNames !== null) ? classNames : ''}>{props.text}</span>\n     }\n     \n    }\n\nexport default Leaf;","import React from 'react'\n\nconst DialogContext = React.createContext({open: false, content: {}})\n\nexport default DialogContext;","import React, { useContext } from 'react'\nimport DialogContext from '../../contextAPI/dialog-context'\nimport styles from './InterlinearLeaf.module.css'\n\nconst InterlinearLeaf = (props) => {\n    // This controls the popup for the word information\n    const dialog = useContext(DialogContext);\n    const updateDialog = (obj) => {\n        dialog.newDialog(obj)\n    }\n\n    // Check if the leaf is a chapter or verse\n    const chapter = (props.marks) ? props.marks.find(mark => mark.type === 'chapter') : undefined\n    const verse = (props.marks) ? props.marks.find(mark => mark.type === 'verse') : undefined\n    const bibleRef = (verse || chapter) ? props.marks.find(mark => mark.type === 'reference') : undefined\n\n    //ClassNames Array\n    const classNames = (verse !== undefined || chapter !== undefined) ? \n        [\n            (chapter) ? styles.chapter : null, \n            (verse) ? styles.verse : null\n        ]\n        .join(' ') : styles.interlinearLeaf\n    \n    // If it's just a chapter/verse reference then return that leaf with a reference\n    if (verse || chapter) {\n        return <span reference={`${bibleRef.data.book}.${bibleRef.data.chapter}.${bibleRef.data.verse}`} className={(classNames !== null) ? classNames : ''}>{props.text}</span>\n    }\n    \n    // Get Original Language Word Data\n    const word_metadata = (props.marks) ? props.marks.find(mark => mark.type === 'word_metadata') : undefined\n    \n    // Check for paragraph breaks in the text string\n    let newLine = props.text.search('\\n')\n    // If there's a paragraph break, split the text string into two parts: text1 = word, text2 = paragraph break + white space (if any)\n    const text1 = (newLine !== -1)? props.text.substring(0,newLine): null\n    const text2 = (newLine !== -1)? props.text.substring(newLine) : null\n\n    if (newLine > -1) {\n        return (\n            <React.Fragment>\n                <span \n                    key={word_metadata.data.word_ID} \n                    className={styles.whitespace} \n                    onClick={() => updateDialog({open: !dialog.dialog.open, content: word_metadata.data})}\n                >\n                    <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{text1}</span>\n                    <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>{word_metadata.data.StrongNumber}</span>\n                    <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>{word_metadata.data.IT}</span>\n                </span>\n                    {(!text2)?(<div className={styles.lineBreak}/>):(\n                    <React.Fragment>\n                        <div className={styles.lineBreak}/>\n                        <span key={word_metadata.data.word_ID} className={styles.whitespace}>\n                            <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{text2}</span>\n                            {/* <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}></span>\n                            <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}></span> */}\n                        </span>\n                    </React.Fragment>)}\n            </React.Fragment>\n        )\n    } else {\n        return (\n                <span \n                    key={word_metadata.data.word_ID} \n                    className={styles.interlinearLeaf} \n                    onClick={() => updateDialog({open: !dialog.dialog.open, content: word_metadata.data})}\n                >\n                    <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{props.text}</span>\n                    <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>{word_metadata.data.StrongNumber}</span>\n                    <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>{word_metadata.data.IT}</span>\n                </span>\n        )\n    }\n}\n\nexport default InterlinearLeaf;","import React from 'react'\nimport styles from './SourceName.module.css'\n\nconst SourceName = (props) => (\n    <p className={styles.sourceName}>{props.sourceName}</p>\n)\n\nexport default SourceName;","import React from 'react'\nimport Leaf from '../Leaf/Leaf'\nimport InterlinearLeaf from '../Leaf/InterlinearLeaf'\nimport SourceName from '../SourceName/SourceName'\nimport styles from \"./SpeechBubble.module.css\"\n\nconst SpeechBubble = (props) => {\n    // const hebrew = props.language === 'HBR'\n    const Interlinear = (props.language === 'GRK') ? true : false\n    return (\n        <div>\n            <SourceName sourceName={props.sourceData.source} />\n            <div className={[styles.speechbubble, styles[props.sourceData.color]].join(' ')}>\n            {props.leaves.map(leaf => {\n                if (Interlinear) {\n                    return <InterlinearLeaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                } else {\n                    return <Leaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                }\n            })}\n            </div>\n        </div>\n    )\n    \n}\n\nexport default SpeechBubble;","import React from 'react'\nimport Leaf from '../Leaf/Leaf'\nimport InterlinearLeaf from '../Leaf/InterlinearLeaf'\nimport SourceName from '../SourceName/SourceName'\n\nconst NarratorText = (props) => {\n    // const hebrew = props.language === 'HBR'\n    const Interlinear = (props.language === 'GRK') ? true : false\n    return (\n        <div>\n            <SourceName sourceName={props.sourceData.source} />\n            <div>\n            {props.leaves.map(leaf => {\n                if (Interlinear) {\n                    return <InterlinearLeaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                } else {\n                    return <Leaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                }\n            })}\n            </div>\n        </div>\n)}\n\nexport default NarratorText;","import React from 'react'\nimport styles from './WordDataTable.module.css'\n\nconst Table = (props) => (<table className={styles.dialogTable}>\n            {props.rowData.map(row => (<tr><td>{row[0]}</td><td>{(typeof row[1] === \"object\")?`${row[1].book_id} ${row[1].chapter_id}:${row[1].verse_id}`:row[1]}</td></tr>))}\n        </table>)\n\nexport default Table;","import React, { useState } from 'react'\n// import { graphql } from \"gatsby\"\nimport SpeechBubble from '../components/SpeechBubble/SpeechBubble'\nimport Narrator from '../components/NarratorText/NarratorText'\nimport DialogContext from '../contextAPI/dialog-context'\nimport {Dialog} from 'primereact/dialog';\nimport WordDataTable from '../components/WordDataTable/WordDataTable'\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nexport default ({pageContext: {segment}}) => {\n  \n  // This controls the popup for the word information\n  const [ dialog, updateDialog ] = useState({open: false, content: {}})\n  const newDialog = (obj) => {\n    updateDialog(obj)\n  }\n\n  // convert string into JSON\n  const contentJSON = JSON.parse(segment.content)\n\n  return (\n    <div style={{ width: 960, margin: \"4rem auto\" }}>\n    <DialogContext.Provider value={{dialog: dialog, newDialog: newDialog}}>\n        {contentJSON.document.nodes.map(block => {\n        const SVBData = {\n          color: block.data.color,\n          source: block.data.source\n        }\n        if (SVBData.color === 'black') {\n          return (<Narrator \n            sourceData={SVBData}\n            leaves={block.nodes[0].leaves} />\n            )\n        } else {\n          return (<SpeechBubble \n            sourceData={SVBData}\n            leaves={block.nodes[0].leaves}/>\n            )\n        }\n      })}\n      {(dialog.open === true) ? (\n                <Dialog header=\"WORD INFO\" visible={dialog.open} style={{width: '50vw'}} modal={true} onHide={() => updateDialog({open: false, content: {}})}>\n                    <WordDataTable rowData={Object.entries(dialog.content)} />\n                </Dialog> \n            ) : null}\n    </DialogContext.Provider>\n    </div>\n  )}"],"sourceRoot":""}