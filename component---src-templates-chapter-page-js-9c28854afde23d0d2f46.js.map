{"version":3,"sources":["webpack:///./src/contextAPI/dialog-context.js","webpack:///./src/components/Leaf/InterlinearLeaf.js","webpack:///./src/components/SourceName/SourceName.js","webpack:///./src/components/SpeechBubble/SpeechBubble.js","webpack:///./src/components/NarratorText/NarratorText.js","webpack:///./src/components/WordDataTable/WordDataTable.js","webpack:///./src/templates/ChapterPage.js"],"names":["DialogContext","React","createContext","open","content","InterlinearLeaf","props","dialog","useContext","updateDialog","obj","newDialog","chapter","marks","find","mark","type","undefined","verse","bibleRef","classNames","styles","join","interlinearLeaf","react_default","a","createElement","reference","data","book","className","text","word_metadata","newLine","search","text1","substring","text2","Fragment","key","word_ID","whitespace","onClick","interlinearinterlinear","interlinearStrongs","StrongNumber","interlinearTranslation","IT","lineBreak","SourceName","sourceName","SpeechBubble","components_SourceName_SourceName","sourceData","source","speechbubble","color","leaves","map","leaf","Leaf_InterlinearLeaf","NarratorText","Table","dialogTable","rowData","row","book_id","chapter_id","verse_id","__webpack_exports__","_ref","segment","pageContext","_useState","useState","contentJSON","JSON","parse","style","width","margin","dialog_context","Provider","value","document","nodes","block","SVBData","components_NarratorText_NarratorText","components_SpeechBubble_SpeechBubble","primereact_dialog","header","visible","modal","onHide","WordDataTable","Object","entries"],"mappings":"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","file":"component---src-templates-chapter-page-js-9c28854afde23d0d2f46.js","sourcesContent":["import React from 'react'\n\nconst DialogContext = React.createContext({open: false, content: {}})\n\nexport default DialogContext;","import React, { useContext } from 'react'\nimport DialogContext from '../../contextAPI/dialog-context'\nimport styles from './InterlinearLeaf.module.css'\n\nconst InterlinearLeaf = (props) => {\n    // This controls the popup for the word information\n    const dialog = useContext(DialogContext);\n    const updateDialog = (obj) => {\n        dialog.newDialog(obj)\n    }\n\n    // Check if the leaf is a chapter or verse\n    const chapter = (props.marks) ? props.marks.find(mark => mark.type === 'chapter') : undefined\n    const verse = (props.marks) ? props.marks.find(mark => mark.type === 'verse') : undefined\n    const bibleRef = (verse || chapter) ? props.marks.find(mark => mark.type === 'reference') : undefined\n\n    //ClassNames Array\n    const classNames = (verse !== undefined || chapter !== undefined) ? \n        [\n            (chapter) ? styles.chapter : null, \n            (verse) ? styles.verse : null\n        ]\n        .join(' ') : styles.interlinearLeaf\n    \n    // If it's just a chapter/verse reference then return that leaf with a reference\n    if (verse || chapter) {\n        return <span reference={`${bibleRef.data.book}.${bibleRef.data.chapter}.${bibleRef.data.verse}`} className={(classNames !== null) ? classNames : ''}>{props.text}</span>\n    }\n    \n    // Get Original Language Word Data\n    const word_metadata = (props.marks) ? props.marks.find(mark => mark.type === 'word_metadata') : undefined\n    \n    // Check for paragraph breaks in the text string\n    let newLine = props.text.search('\\n')\n    // If there's a paragraph break, split the text string into two parts: text1 = word, text2 = paragraph break + white space (if any)\n    const text1 = (newLine !== -1)? props.text.substring(0,newLine): null\n    const text2 = (newLine !== -1)? props.text.substring(newLine) : null\n\n    if (newLine > -1) {\n        return (\n            <React.Fragment>\n                <span \n                    key={word_metadata.data.word_ID} \n                    className={styles.whitespace} \n                    onClick={() => updateDialog({open: !dialog.dialog.open, content: word_metadata.data})}\n                >\n                    <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{text1}</span>\n                    <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>{word_metadata.data.StrongNumber}</span>\n                    <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>{word_metadata.data.IT}</span>\n                </span>\n                    {(!text2)?(<div className={styles.lineBreak}/>):(\n                    <React.Fragment>\n                        <div className={styles.lineBreak}/>\n                        <span key={word_metadata.data.word_ID} className={styles.whitespace}>\n                            <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{text2}</span>\n                            {/* <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}></span>\n                            <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}></span> */}\n                        </span>\n                    </React.Fragment>)}\n            </React.Fragment>\n        )\n    } else {\n        return (\n                <span \n                    key={word_metadata.data.word_ID} \n                    className={styles.interlinearLeaf} \n                    onClick={() => updateDialog({open: !dialog.dialog.open, content: word_metadata.data})}\n                >\n                    <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{props.text}</span>\n                    <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>{word_metadata.data.StrongNumber}</span>\n                    <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>{word_metadata.data.IT}</span>\n                </span>\n        )\n    }\n}\n\nexport default InterlinearLeaf;","import React from 'react'\nimport styles from './SourceName.module.css'\n\nconst SourceName = (props) => (\n    <p className={styles.sourceName}>{props.sourceName}</p>\n)\n\nexport default SourceName;","import React from 'react'\nimport Leaf from '../Leaf/Leaf'\nimport InterlinearLeaf from '../Leaf/InterlinearLeaf'\nimport SourceName from '../SourceName/SourceName'\nimport styles from \"./SpeechBubble.module.css\"\n\nconst SpeechBubble = (props) => {\n    // const hebrew = props.language === 'HBR'\n    const Interlinear = true\n    return (\n        <div>\n            <SourceName sourceName={props.sourceData.source} />\n            <div className={[styles.speechbubble, styles[props.sourceData.color]].join(' ')}>\n            {props.leaves.map(leaf => {\n                if (Interlinear) {\n                    return <InterlinearLeaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                } else {\n                    return <Leaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                }\n            })}\n            </div>\n        </div>\n    )\n    \n}\n\nexport default SpeechBubble;","import React from 'react'\nimport Leaf from '../Leaf/Leaf'\nimport InterlinearLeaf from '../Leaf/InterlinearLeaf'\nimport SourceName from '../SourceName/SourceName'\n\nconst NarratorText = (props) => {\n    // const hebrew = props.language === 'HBR'\n    const Interlinear = true\n    return (\n        <div>\n            <SourceName sourceName={props.sourceData.source} />\n            <div>\n            {props.leaves.map(leaf => {\n                if (Interlinear) {\n                    return <InterlinearLeaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                } else {\n                    return <Leaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                }\n            })}\n            </div>\n        </div>\n)}\n\nexport default NarratorText;","import React from 'react'\nimport styles from './WordDataTable.module.css'\n\nconst Table = (props) => (<table className={styles.dialogTable}>\n            {props.rowData.map(row => (<tr><td>{row[0]}</td><td>{(typeof row[1] === \"object\")?`${row[1].book_id} ${row[1].chapter_id}:${row[1].verse_id}`:row[1]}</td></tr>))}\n        </table>)\n\nexport default Table;","import React, { useState } from 'react'\n// import { graphql } from \"gatsby\"\nimport SpeechBubble from '../components/SpeechBubble/SpeechBubble'\nimport Narrator from '../components/NarratorText/NarratorText'\nimport DialogContext from '../contextAPI/dialog-context'\nimport {Dialog} from 'primereact/dialog';\nimport WordDataTable from '../components/WordDataTable/WordDataTable'\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nexport default ({pageContext: {segment}}) => {\n  \n  // This controls the popup for the word information\n  const [ dialog, updateDialog ] = useState({open: false, content: {}})\n  const newDialog = (obj) => {\n    updateDialog(obj)\n  }\n\n  // convert string into JSON\n  const contentJSON = JSON.parse(segment.content)\n\n  return (\n    <div style={{ width: 960, margin: \"4rem auto\" }}>\n    <DialogContext.Provider value={{dialog: dialog, newDialog: newDialog}}>\n        {contentJSON.document.nodes.map(block => {\n        const SVBData = {\n          color: block.data.color,\n          source: block.data.source\n        }\n        if (SVBData.color === 'black') {\n          return (<Narrator \n            sourceData={SVBData}\n            leaves={block.nodes[0].leaves} />\n            )\n        } else {\n          return (<SpeechBubble \n            sourceData={SVBData}\n            leaves={block.nodes[0].leaves}/>\n            )\n        }\n      })}\n      {(dialog.open === true) ? (\n                <Dialog header=\"WORD INFO\" visible={dialog.open} style={{width: '50vw'}} modal={true} onHide={() => updateDialog({open: false, content: {}})}>\n                    <WordDataTable rowData={Object.entries(dialog.content)} />\n                </Dialog> \n            ) : null}\n    </DialogContext.Provider>\n    </div>\n  )}"],"sourceRoot":""}