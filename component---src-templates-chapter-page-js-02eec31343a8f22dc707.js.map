{"version":3,"sources":["webpack:///./src/components/SourceName/SourceName.js","webpack:///./src/components/Leaf/Leaf.js","webpack:///./src/components/Leaf/InterlinearLeaf.js","webpack:///./src/components/Inlines/Inlines.js","webpack:///./src/components/SpeechBubble/SpeechBubble.js","webpack:///./src/components/Introduction/Paragraph/Paragraph.js","webpack:///./src/components/Introduction/BulletedList/BulletedList.js","webpack:///./src/components/Introduction/Subtitle/Subtitle.js","webpack:///./src/components/Introduction/Introduction.js","webpack:///./src/components/NarratorText/NarratorText.js","webpack:///./src/components/SegmentData/SegmentData.js","webpack:///./src/templates/ChapterPage.js","webpack:///./src/images/SVB-Read-together.png","webpack:///./src/images/SVB-Discuss-together.png"],"names":["SourceName","props","receivedAppContext","useContext","AppContext","react_default","a","createElement","className","styles","sourceName","onClick","updateSourceDialog","open","sourceDialog","content","data","Leaf","chapter","marks","find","mark","type","undefined","verse","footnote","bibleRef","classNames","leaf","join","id","book","style","display","displayRef","text","Tooltip","title","enterTouchDelay","InterlinearLeaf","updateDialog","obj","newDialog","interlinearLeaf","word_metadata","newLine","search","text1","substring","text2","Fragment","key","word_ID","whitespace","dialog","Object","assign","interlinearinterlinear","interlinearStrongs","StrongNumber","interlinearTranslation","language","IT","ETCBCgloss","lineBreak","interlinearLeafGreek","interlinearLeafHebrew","backgroundColor","extendedStrongNumber","Inlines","prose","leaves","map","interlinear","Leaf_InterlinearLeaf","components_Leaf_Leaf","poetry","SpeechBubble","hebrew","components_SourceName_SourceName","sourceData","source","speechbubblehebrew","color","inlines","inline","components_Inlines_Inlines","nodes","speechbubble","Paragraph","push","length","ListItem","listItem","BulletedList","listStyle","item","BulletedList_ListItem","Subtitle","Introduction","block","Introduction_Paragraph_Paragraph","Introduction_Subtitle_Subtitle","Introduction_BulletedList_BulletedList","NarratorText","useStyles","makeStyles","main","justifyContent","flexWrap","textAlign","marginBottom","maxHeight","card","margin","leftCard","marginRight","top5","flex","fontSize","padding","cardTitle","textDecoration","fontWeight","top5List","cardContent","lineHeight","red","green","blue","topSources","topWords","colorComparison","createColorData","keys","pop","values","labels","datasets","Math","round","total","hoverBackgroundColor","chartOptions","responsive","maintainAspectRatio","layout","left","right","top","bottom","legend","position","boxWidth","SegmentData","classes","Card","CardHeader","disableTypography","CardContent","chart","es","colors","options","sourcesArray","val","words","sort","b","top5Sources","count","forEach","name","getTopSources","sources","repeatedWords","segmentDataContainer","header","paddingTop","width","reference","discuss","borderTop","footer","& p","images","readImage","borderBottom","questions","__webpack_exports__","_ref","segment","pageContext","useEffect","window","searchID","scrollToElement","offset","ease","duration","updateSearchID","currentYear","Date","getFullYear","components_SegmentData_SegmentData","disableFocusListener","src","ReadTogether","alt","components_NarratorText_NarratorText","components_SpeechBubble_SpeechBubble","DiscussTogether","components_Introduction_Introduction","document","module","exports","__webpack_require__","p"],"mappings":"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","file":"component---src-templates-chapter-page-js-02eec31343a8f22dc707.js","sourcesContent":["import React, { useContext } from 'react'\nimport styles from './SourceName.module.css'\nimport AppContext from '../../contextAPI/AppContext'\n\nconst SourceName = (props) => {\n    const receivedAppContext = useContext(AppContext)\n    return (\n    <p className={styles.sourceName}\n    onClick={() => receivedAppContext.updateSourceDialog({open: !receivedAppContext.sourceDialog.open, content: props.data})}\n    >{props.sourceName}</p>\n)}\n\nexport default SourceName;","import React, { useContext } from 'react'\nimport styles from './Leaf.module.css'\nimport AppContext from '../../contextAPI/AppContext'\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst Leaf = (props) => {\n    // This controls the visibility of chapter and verse references\n    const receivedAppContext = useContext(AppContext);\n\n    // Create CSS styles from marks\n    const chapter = (props.marks) ? props.marks.find(mark => mark.type === 'chapter') : undefined\n    const verse = (props.marks) ? props.marks.find(mark => mark.type === 'verse') : undefined\n    const footnote = (props.marks) ? props.marks.find(mark => mark.type === 'footnote') : undefined\n    const bibleRef = (verse || chapter) ? props.marks.find(mark => mark.type === 'reference') : undefined\n    const classNames = (verse !== undefined || chapter !== undefined) ? [(chapter !== undefined)?styles.chapter:null, (verse)?styles.verse:null, styles.leaf].join(' ') : styles.leaf\n    \n    // If it's just a chapter/verse reference then return that leaf with a reference\n    if (verse || chapter) {\n        return <span id={`${bibleRef.data.book}-${bibleRef.data.chapter}-${bibleRef.data.verse}`} className={(classNames !== null) ? classNames : ''} style={{display: (receivedAppContext.displayRef) ? '' : 'none'}}>{props.text}{(chapter)?'':'\\u00A0'}</span>\n    }\n    // If not a verse, don't create a reference\n     else {\n        return (\n            <span className={(classNames !== null) ? classNames : ''}>\n                {footnote ? <Tooltip title={footnote.data.footnote} enterTouchDelay={50}><span>{props.text}</span></Tooltip> : props.text}\n            </span>\n        )\n     }\n     \n    }\n\nexport default Leaf;","import React, { useContext } from 'react'\nimport AppContext from '../../contextAPI/AppContext'\nimport styles from './InterlinearLeaf.module.css'\n\nconst InterlinearLeaf = (props) => {\n\n    const receivedAppContext = useContext(AppContext);\n    const updateDialog = (obj) => {\n        receivedAppContext.newDialog(obj)\n    }\n\n    // Check if the leaf is a chapter or verse\n    const chapter = (props.marks) ? props.marks.find(mark => mark.type === 'chapter') : undefined\n    const verse = (props.marks) ? props.marks.find(mark => mark.type === 'verse') : undefined\n    const bibleRef = (verse || chapter) ? props.marks.find(mark => mark.type === 'reference') : undefined\n\n    //ClassNames Array\n    const classNames = (verse !== undefined || chapter !== undefined) ? \n        [\n            (chapter) ? styles.chapter : null, \n            (verse) ? styles.verse : null\n        ]\n        .join(' ') : styles.interlinearLeaf\n    \n    // If it's just a chapter/verse reference then return that leaf with a reference\n    if (verse || chapter) {\n        return <span id={`${bibleRef.data.book}-${bibleRef.data.chapter}-${bibleRef.data.verse}`} className={(classNames !== null) ? classNames : ''}  style={{display: (receivedAppContext.displayRef) ? '' : 'none'}}>{props.text}{(chapter)?'':'\\u00A0'}</span>\n    }\n    \n    // Get Original Language Word Data\n    const word_metadata = (props.marks) ? props.marks.find(mark => mark.type === 'word_metadata') : undefined\n\n    // If it's just a chapter/verse reference then return that leaf with a reference\n    if (!word_metadata) {\n        return <span className={(classNames !== null) ? classNames : ''}>{props.text}</span>\n    }\n\n    // Check for paragraph breaks in the text string\n    let newLine = props.text.search('\\n')\n    // If there's a paragraph break, split the text string into two parts: text1 = word, text2 = paragraph break + white space (if any)\n    const text1 = (newLine !== -1)? props.text.substring(0,newLine): null\n    const text2 = (newLine !== -1)? props.text.substring(newLine) : null\n\n    if (newLine > -1) {\n        return (\n            <React.Fragment>\n                <span \n                    key={word_metadata.data.word_ID} \n                    className={styles.whitespace} \n                    onClick={() => updateDialog({open: !receivedAppContext.dialog.open, content: Object.assign(word_metadata.data, {text: props.text})})}\n                >\n                    <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{text1}</span>\n                    <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>{(!word_metadata.data.StrongNumber) ? '-' : word_metadata.data.StrongNumber}</span>\n                    <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>{(receivedAppContext.language === 'GRK') ? word_metadata.data.IT : word_metadata.data.ETCBCgloss}</span>\n                </span>\n                    {(!text2)?(<div className={styles.lineBreak}/>):(\n                    <React.Fragment>\n                        <div className={styles.lineBreak}/>\n                        <span key={word_metadata.data.word_ID} className={styles.whitespace}>\n                            <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{text2}</span>\n                            {/* <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>TEST</span>\n                            <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>TEST</span> */}\n                        </span>\n                    </React.Fragment>)}\n            </React.Fragment>\n        )\n    } else {\n        return (\n                <span \n                    key={word_metadata.data.word_ID} \n                    className={(receivedAppContext.language === 'GRK') ? styles.interlinearLeafGreek : styles.interlinearLeafHebrew} \n                    onClick={() => updateDialog({open: !receivedAppContext.dialog.open, content: Object.assign(word_metadata.data, {text: props.text})})}\n                    style={(word_metadata.data.StrongNumber === 'H4487') ? {backgroundColor: 'yellow'} : null}\n                >\n                    <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{props.text}</span>\n                    <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>{(word_metadata.data.StrongNumber !== '') ? word_metadata.data.StrongNumber : word_metadata.data.extendedStrongNumber}</span>\n                    <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>{(receivedAppContext.language === 'GRK') ? word_metadata.data.IT : word_metadata.data.ETCBCgloss}</span>\n                </span>\n        )\n    }\n}\n\nexport default InterlinearLeaf;","import React, { useContext } from 'react'\nimport styles from './Inlines.module.css'\nimport Leaf from '../Leaf/Leaf'\nimport InterlinearLeaf from '../Leaf/InterlinearLeaf'\nimport AppContext from '../../contextAPI/AppContext'\n\nconst Inlines = (props) => {\n    const receivedAppContext = useContext(AppContext)\n    if (props.type === 'prose') {\n        return (\n            <div className={styles.prose}>\n                {props.leaves.map(leaf => {\n                    if (receivedAppContext.interlinear) {\n                        return <InterlinearLeaf \n                        marks={leaf.marks}\n                        text={leaf.text}/>\n                    } else {\n                        return <Leaf \n                        marks={leaf.marks}\n                        text={leaf.text}/>\n                    }\n                })}\n            </div>\n        )\n    } else if (props.type === 'poetry') {\n        return (\n            <div className={styles.poetry}>\n                {props.leaves.map(leaf => {\n                    if (receivedAppContext.interlinear) {\n                        return <InterlinearLeaf \n                        marks={leaf.marks}\n                        text={leaf.text}/>\n                    } else {\n                        return <Leaf \n                        marks={leaf.marks}\n                        text={leaf.text}/>\n                    }\n                })}\n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nexport default Inlines","import React, { useContext } from 'react'\nimport SourceName from '../SourceName/SourceName'\nimport styles from \"./SpeechBubble.module.css\"\nimport Inlines from '../Inlines/Inlines'\nimport AppContext from '../../contextAPI/AppContext'\n\nconst SpeechBubble = (props) => {\n    const receivedAppContext = useContext(AppContext)\n\n    if (receivedAppContext.language === 'HBR') {\n        return (\n            <div className={styles.hebrew}>\n                <SourceName \n                    sourceName={props.sourceData.source}\n                    data={props.sourceData}\n                />\n                <div className={[styles.speechbubblehebrew, styles[props.sourceData.color]].join(' ')}>\n                {props.inlines.map(inline => {\n                    return <Inlines \n                    type={inline.type}\n                    leaves={inline.nodes}/>\n                })}\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div>\n                <SourceName \n                    sourceName={props.sourceData.source}\n                    data={props.sourceData}\n                />\n                <div className={[styles.speechbubble, styles[props.sourceData.color]].join(' ')}>\n                {props.inlines.map(inline => {\n                    return <Inlines \n                    type={inline.type}\n                    leaves={inline.nodes}/>\n                })}\n                </div>\n            </div>\n        )\n    }\n    \n    \n}\n\nexport default SpeechBubble;","import React from 'react'\nimport styles from './Paragraph.module.css'\n\nconst Paragraph = (props) => {\n    return (\n        <p>\n            {props.content[0].leaves.map(leaf => { \n                let classNames = []\n                if (leaf.marks) {\n                    if (leaf.marks.find(mark => mark.type === 'bold')) {\n                        classNames.push('bold')\n                    }\n                    if (leaf.marks.find(mark => mark.type === 'italic')) {\n                        classNames.push('italic')\n                    }\n                    if (leaf.marks.find(mark => mark.type === 'smallcaps')) {\n                        classNames.push('smallcaps')\n                    }\n                }\n                    return <span className={(classNames.length > 0) ? classNames.map(mark => styles[mark]).join(' ') : ''}>{leaf.text}</span>})\n            }\n        </p>\n    )\n}\n\nexport default Paragraph","import React from 'react'\nimport styles from './BulletedList.module.css'\n\nconst ListItem = (props) => {\n    return (<p className={styles.listItem}>\n        {props.content[0].leaves.map(leaf => {\n            let classNames = []\n            if (leaf.marks) {\n                if (leaf.marks.find(mark => mark.type === 'bold')) {\n                    classNames.push('bold')\n                }\n                if (leaf.marks.find(mark => mark.type === 'italic')) {\n                    classNames.push('italic')\n                }\n                if (leaf.marks.find(mark => mark.type === 'smallcaps')) {\n                    classNames.push('smallcaps')\n                }\n            }\n            return <span className={(classNames.length > 0) ? classNames.map(mark => styles[mark]).join(' ') : ''}>{leaf.text}</span>\n        })}\n    </p>)\n}\n\nconst BulletedList = (props) => {\n    return (\n        <ul style={{listStyle: 'none'}}>\n            {props.content.map(item => { \n                return <ListItem content={item.nodes} />\n            })}\n        </ul>\n    )\n}\n\nexport default BulletedList","import React from 'react'\nimport styles from './Subtitle.module.css'\n\nconst Subtitle = (props) => {\n    return (\n        <p>\n            {props.content[0].leaves.map(leaf => { \n                let classNames = ['subtitle']\n                if (leaf.marks) {\n                    if (leaf.marks.find(mark => mark.type === 'bold')) {\n                        classNames.push('bold')\n                    }\n                    if (leaf.marks.find(mark => mark.type === 'italic')) {\n                        classNames.push('italic')\n                    }\n                    if (leaf.marks.find(mark => mark.type === 'smallcaps')) {\n                        classNames.push('smallcaps')\n                    }\n                }\n                    return <span className={(classNames.length > 0) ? classNames.map(mark => styles[mark]).join(' ') : ''}>{leaf.text}</span>})\n            }\n        </p>\n    )\n}\n\nexport default Subtitle","import React from 'react'\nimport styles from './Introduction.module.css'\nimport Paragraph from './Paragraph/Paragraph'\nimport BulletedList from './BulletedList/BulletedList'\nimport Table from './Table/Table'\nimport Subtitle from './Subtitle/Subtitle'\n\nconst Introduction = (props) => {\n    return (\n        <div>\n            {props.content.map(block => {\n                switch (block.type) {\n                    case 'speech':\n                        return <Paragraph content={block.nodes} />\n                    case 'subtitle':\n                        return <Subtitle content={block.nodes} />\n                    case 'bulleted-list':\n                        return <BulletedList content={block.nodes} />\n                    case 'table':\n                        return <p style={{color: 'red'}}>TABLE WILL BE HERE!</p>\n                        // <Table content={block.nodes} />\n                    default:\n                        return null\n                }\n            })}\n        </div>\n    )\n}\n\nexport default Introduction","import React, { useContext } from 'react'\nimport styles from \"./NarratorText.module.css\"\nimport Inlines from '../Inlines/Inlines'\nimport SourceName from '../SourceName/SourceName'\nimport AppContext from '../../contextAPI/AppContext'\n\nconst NarratorText = (props) => {\n    const receivedAppContext = useContext(AppContext)\n\n    if (receivedAppContext.language === 'HBR') {\n        return (\n            <div className={styles.hebrew}>\n                <SourceName \n                    sourceName={props.sourceData.source}\n                    data={props.sourceData}\n                />\n                <div>\n                {props.inlines.map(inline => {\n                    return <Inlines \n                    type={inline.type}\n                    leaves={inline.nodes}/>\n                })}\n                </div>\n            </div>\n    )} else {\n        return (\n            <div>\n                <SourceName \n                    sourceName={props.sourceData.source}\n                    data={props.sourceData}\n                />\n                <div>\n                {props.inlines.map(inline => {\n                    return <Inlines \n                    type={inline.type}\n                    leaves={inline.nodes}/>\n                })}\n                </div>\n            </div>\n    )}\n}\n\nexport default NarratorText;","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Doughnut } from 'react-chartjs-2'\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  main: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    textAlign: 'center',\n    marginBottom: '8px',\n    maxHeight: 'fit-content',\n  },\n  card: {\n    maxHeight: '150px',\n    margin: '5px',\n  },\n  leftCard: {\n    marginRight: '8px'\n  },\n  top5: {\n    flex: 1,\n    textAlign: 'center',\n    fontSize: '75%',\n    padding: 0\n  },\n  cardTitle: {\n    margin: '0',\n    textDecoration: 'underline',\n    fontWeight: 'bold',\n    fontSize: '80%',\n    padding: '2px'\n  },\n  top5List: {\n    padding: '1px',\n    margin: 1,\n  },\n  cardContent: {\n    margin: 0,\n    padding: 0,\n    fontSize: '11px',\n    lineHeight: '13px'\n  },\n  backgroundColor: {\n    backgroundColor: 'rgba(58, 76, 125, 0.07)'\n  },\n  red: {\n    color: '#d60000'\n  },\n  green: {\n    color: '#006400'\n  },\n  blue: {\n    color: 'darkblue'\n  },\n  topSources: {\n    flex: '1 100px'\n  },\n  topWords: {\n    flex: '1 100px'\n  },\n  colorComparison: {\n    flex: '1 1 300px',\n  }\n})\n\nconst getTopSources = (obj) => {\n    const sourceNames = Object.keys(obj);\n    let sourcesArray = sourceNames.map(sourceName => {\n        return {\n            key: sourceName,\n            val: obj[sourceName].words,\n            color: obj[sourceName].color\n        }\n    })\n\n    sourcesArray = sourcesArray.sort(function (a, b) {\n        if (a.val > b.val) {\n            return -1\n        } else if (a.val < b.val) {\n            return 1\n        } else if (a.val === b.val) {\n            return 0\n        }\n    });\n    const top5Sources = []\n    let count = 0;\n    sourcesArray.forEach(source => {\n        if (source.key !== \"The Narrator\" && count < 5) {\n            top5Sources.push({\n              name: source.key,\n              words: source.val, \n              color: source.color\n            })\n            count += 1;\n        } else return\n    })\n    return top5Sources\n}\n\nconst createColorData = (obj) => {\n  const labels = Object.keys(obj);\n  labels.pop()\n  const values = Object.values(obj)\n  values.pop()\n  return {\n    labels: ['Narrator', 'God', 'Main Character(s)', 'Everyone Else'],\n    datasets: [{\n      data: [\n      Math.round((values[0] / obj.total) * 100),\n      Math.round((values[3] / obj.total) * 100),\n      Math.round((values[2] / obj.total) * 100),\n      Math.round((values[1] / obj.total) * 100)\n      ],\n      backgroundColor: [\n        'grey',\n        '#ffadad',\n        '#b9f8b9',\n        'rgb(142, 227, 255)',\n        ],\n      hoverBackgroundColor: [\n        'black',\n        '#d60000',\n        '#006400',\n        'darkblue',\n        ]\n    }]\n  }\n}\n\nconst chartOptions = {\n  responsive: true,\n  maintainAspectRatio: true,\n  layout: {\n    padding: {\n      left: 10,\n      right: 10,\n      top: 0,\n      bottom: 50\n    }\n  },\n  legend: {\n    position: 'right',\n    labels: {\n      fontSize: 9,\n      boxWidth: 40\n    }\n    // display: false\n  },\n}\n\nconst SegmentData = (props) => {\n    const classes = useStyles();\n    return (\n      <div className={classes.main}>\n        <Card className={`${classes.backgroundColor} ${classes.card} ${classes.colorComparison}`}>\n          <CardHeader title=\"Color Comparison\" disableTypography=\"true\" className={classes.cardTitle}/>\n          <CardContent className={`${classes.cardContent} ${classes.chart}`}>\n            <Doughnut data={createColorData(props.colors)} options={chartOptions} />\n          </CardContent>\n        </Card>\n        <Card className={`${classes.top5} ${classes.leftCard} ${classes.backgroundColor} ${classes.card}  ${classes.topSources}`}>\n          <CardHeader title=\"Top Sources (words)\" disableTypography=\"true\" className={classes.cardTitle}/>\n          <CardContent className={classes.cardContent}>\n          {getTopSources(props.sources).map(source => <p className={`${classes.top5List} ${classes[source.color]} ${classes.topWords}`} >{source.name} ({source.words})</p>)}\n          </CardContent>\n        </Card>\n        <Card className={`${classes.top5} ${classes.backgroundColor} ${classes.card} ${classes.topWords}`}>\n            <CardHeader title=\"Top Repeated Words\" disableTypography=\"true\" className={classes.cardTitle}/>\n            <CardContent className={classes.cardContent}>\n            <p className={classes.top5List}>{props.repeatedWords[0]}</p>\n            <p className={classes.top5List}>{props.repeatedWords[2]}</p>\n            <p className={classes.top5List}>{props.repeatedWords[1]}</p>\n            <p className={classes.top5List}>{props.repeatedWords[3]}</p>\n            <p className={classes.top5List}>{props.repeatedWords[4]}</p>\n          </CardContent>\n        </Card>\n      </div>\n)}\n\nexport default SegmentData;","import React, { useEffect, useContext } from 'react'\nimport AppContext from '../contextAPI/AppContext'\nimport scrollToElement from 'scroll-to-element'\nimport SpeechBubble from '../components/SpeechBubble/SpeechBubble'\nimport Introduction from '../components/Introduction/Introduction'\nimport Narrator from '../components/NarratorText/NarratorText'\nimport SegmentData from '../components/SegmentData/SegmentData'\nimport ReadTogether from '../images/SVB-Read-together.png'\nimport DiscussTogether from '../images/SVB-Discuss-together.png'\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  segmentDataContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    margin: '10px 0',\n    padding: '10px 0',\n  },\n  header: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    paddingTop: '5px'\n  },\n  title: {\n    fontSize: '150%',\n    fontWeight: ' bold',\n    textDecoration: 'underline',\n    width: '100%',\n    margin: 0,\n    textAlign: 'center'\n  },\n  reference: {\n    margin: 0,\n    fontSize: '60%',\n    color: 'grey'\n  },\n  discuss: {\n    display: 'block',\n    textAlign: 'center',\n    margin: '10px 0',\n    padding: '10px 0',\n    borderTop: '0.25px lightgrey solid',\n  },\n  footer: {\n    textAlign: 'center',\n    fontSize: '60%',\n    margin: '10px 0 30px 0',\n    '& p': {\n      margin: 0\n    }\n  },\n  images: {\n    width: '200px',\n    margin: '10px auto',\n  },\n  readImage: {\n    marginBottom: '20px',\n    borderBottom: '0.25px lightgrey solid',\n  },\n  content: {\n    margin: '0 0 10px 0',\n    padding: '0 0 10px 0'\n  },\n  questions: {\n    textAlign: 'left',\n    margin: 0,\n    '& p': {\n      margin: '10px 0',\n    }\n  }\n})\n\n\nexport default ({pageContext: {segment}}) => {\n  const classes = useStyles();\n  const receivedAppContext = useContext(AppContext);\n  \n  // let scrollData = location.state\n  useEffect(() => {\n    if (typeof window !== undefined) {\n      \n      if (receivedAppContext.searchID !== '') {\n        const id = `#${receivedAppContext.searchID}`\n        scrollToElement(id, {\n            offset: -65,\n            ease: 'inOutCube',\n            duration: 1500\n        });\n        receivedAppContext.updateSearchID('')\n      }\n    }\n  }, [])\n\n  const currentYear = new Date().getFullYear()\n\n  return (\n    <div>\n      <div className={classes.header}>\n        <p className={classes.title}>Title</p>\n        <p className={classes.reference}>Reference</p>\n      </div>\n      {/* segments start with an array of block nodes (so they have a length), but intros start with an object \"document\"  */}\n      {(segment.content) ? (\n        <div>\n          <div className={classes.segmentDataContainer}>\n            <SegmentData \n              colors={segment.colors}\n              sources={segment.sources}\n              repeatedWords={segment.repeatedWords}\n            />\n          </div>\n          <div className={`${classes.images} ${classes.readImage}`}>\n            <Tooltip disableFocusListener title=\"Each person reads a color aloud\" enterTouchDelay={50}>\n              <img src={ReadTogether} alt=\"Read Together\" />\n            </Tooltip>\n          </div>\n          <div className={classes.content}>\n            {segment.content.map(block => {\n              if (block.data.color === 'black') {\n                return (<Narrator \n                  sourceData={block.data}\n                  inlines={block.nodes} />\n                  )\n              } else {\n                return (<SpeechBubble \n                  sourceData={block.data}\n                  inlines={block.nodes} />\n                  )\n              }\n            })}\n          </div>\n          <div className={classes.discuss}>\n            <div className={classes.images}>\n              <Tooltip disableFocusListener title=\"Discuss the following questions together\" enterTouchDelay={50}>\n                <img src={DiscussTogether} alt=\"Discuss Together\" />\n              </Tooltip>\n            </div>\n            <p className={classes.title}>Title</p>\n            <div className={classes.questions}>\n              <p>Question #1: this is a really, really, really, really, really, really, really, really, really long question</p>\n              <p>Question #2: this is a really, really, really, really, really, really, really, really, really long question</p>\n              <p>Question #3: this is a really, really, really, really, really, really, really, really, really long question</p>\n              <p>Question #4: this is a really, really, really, really, really, really, really, really, really long question</p>\n            </div>\n          </div>\n          <div className={classes.footer}>\n            <p>copyright info of version</p>\n            <p>© {currentYear} SourceView LLC.</p>\n          </div>\n        </div>\n    ) : (\n        <Introduction content={segment.document.nodes} />\n      )}\n    </div>\n  )}","module.exports = __webpack_public_path__ + \"static/SVB-Read-together-c3869d4d71bf839bdd9a7b8be1078625.png\";","module.exports = __webpack_public_path__ + \"static/SVB-Discuss-together-ea87a32e2fe039e84980badd5ee97a5a.png\";"],"sourceRoot":""}