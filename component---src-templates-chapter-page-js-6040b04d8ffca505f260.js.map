{"version":3,"sources":["webpack:///./src/components/SourceName/SourceName.js","webpack:///./src/components/Leaf/Leaf.js","webpack:///./src/components/Leaf/InterlinearLeaf.js","webpack:///./src/components/Inlines/Inlines.js","webpack:///./src/components/SpeechBubble/SpeechBubble.js","webpack:///./src/components/Introduction/Paragraph/Paragraph.js","webpack:///./src/components/Introduction/BulletedList/BulletedList.js","webpack:///./src/components/Introduction/Subtitle/Subtitle.js","webpack:///./src/components/Introduction/Introduction.js","webpack:///./src/components/NarratorText/NarratorText.js","webpack:///./src/templates/ChapterPage.js"],"names":["SourceName","props","receivedAppContext","useContext","AppContext","react_default","a","createElement","className","styles","sourceName","onClick","updateSourceDialog","open","sourceDialog","content","data","Leaf","chapter","marks","find","mark","type","undefined","verse","bibleRef","classNames","leaf","join","id","book","style","display","displayRef","text","InterlinearLeaf","updateDialog","obj","newDialog","interlinearLeaf","word_metadata","newLine","search","text1","substring","text2","Fragment","key","word_ID","whitespace","dialog","Object","assign","interlinearinterlinear","interlinearStrongs","StrongNumber","interlinearTranslation","language","IT","ETCBCgloss","lineBreak","interlinearLeafGreek","interlinearLeafHebrew","backgroundColor","extendedStrongNumber","Inlines","prose","leaves","map","interlinear","Leaf_InterlinearLeaf","components_Leaf_Leaf","poetry","SpeechBubble","hebrew","components_SourceName_SourceName","sourceData","source","speechbubblehebrew","color","inlines","inline","components_Inlines_Inlines","nodes","speechbubble","Paragraph","push","length","ListItem","listItem","BulletedList","listStyle","item","BulletedList_ListItem","Subtitle","Introduction","block","Introduction_Paragraph_Paragraph","Introduction_Subtitle_Subtitle","Introduction_BulletedList_BulletedList","NarratorText","__webpack_exports__","_ref","segment","pageContext","useEffect","window","searchID","console","log","scrollToElement","offset","ease","duration","updateSearchID","components_NarratorText_NarratorText","components_SpeechBubble_SpeechBubble","components_Introduction_Introduction","document"],"mappings":"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","file":"component---src-templates-chapter-page-js-6040b04d8ffca505f260.js","sourcesContent":["import React, { useContext } from 'react'\nimport styles from './SourceName.module.css'\nimport AppContext from '../../contextAPI/AppContext'\n\nconst SourceName = (props) => {\n    const receivedAppContext = useContext(AppContext)\n    return (\n    <p className={styles.sourceName}\n    onClick={() => receivedAppContext.updateSourceDialog({open: !receivedAppContext.sourceDialog.open, content: props.data})}\n    >{props.sourceName}</p>\n)}\n\nexport default SourceName;","import React, { useContext } from 'react'\nimport styles from './Leaf.module.css'\nimport AppContext from '../../contextAPI/AppContext'\n\nconst Leaf = (props) => {\n    // This controls the visibility of chapter and verse references\n    const receivedAppContext = useContext(AppContext);\n\n    // Create CSS styles from marks\n    const chapter = (props.marks) ? props.marks.find(mark => mark.type === 'chapter') : undefined\n    const verse = (props.marks) ? props.marks.find(mark => mark.type === 'verse') : undefined\n    const bibleRef = (verse || chapter) ? props.marks.find(mark => mark.type === 'reference') : undefined\n    const classNames = (verse !== undefined || chapter !== undefined) ? [(chapter !== undefined)?styles.chapter:null, (verse)?styles.verse:null, styles.leaf].join(' ') : styles.leaf\n    \n    // If it's just a chapter/verse reference then return that leaf with a reference\n    if (verse || chapter) {\n        return <span id={`${bibleRef.data.book}-${bibleRef.data.chapter}-${bibleRef.data.verse}`} className={(classNames !== null) ? classNames : ''} style={{display: (receivedAppContext.displayRef) ? '' : 'none'}}>{props.text}{(chapter)?'':'\\u00A0'}</span>\n    }\n    // If not a verse, don't create a reference\n     else {\n        return <span className={(classNames !== null) ? classNames : ''}>{props.text}</span>\n     }\n     \n    }\n\nexport default Leaf;","import React, { useContext } from 'react'\nimport AppContext from '../../contextAPI/AppContext'\nimport styles from './InterlinearLeaf.module.css'\n\nconst InterlinearLeaf = (props) => {\n\n    const receivedAppContext = useContext(AppContext);\n    const updateDialog = (obj) => {\n        receivedAppContext.newDialog(obj)\n    }\n\n    // Check if the leaf is a chapter or verse\n    const chapter = (props.marks) ? props.marks.find(mark => mark.type === 'chapter') : undefined\n    const verse = (props.marks) ? props.marks.find(mark => mark.type === 'verse') : undefined\n    const bibleRef = (verse || chapter) ? props.marks.find(mark => mark.type === 'reference') : undefined\n\n    //ClassNames Array\n    const classNames = (verse !== undefined || chapter !== undefined) ? \n        [\n            (chapter) ? styles.chapter : null, \n            (verse) ? styles.verse : null\n        ]\n        .join(' ') : styles.interlinearLeaf\n    \n    // If it's just a chapter/verse reference then return that leaf with a reference\n    if (verse || chapter) {\n        return <span id={`${bibleRef.data.book}-${bibleRef.data.chapter}-${bibleRef.data.verse}`} className={(classNames !== null) ? classNames : ''}  style={{display: (receivedAppContext.displayRef) ? '' : 'none'}}>{props.text}{(chapter)?'':'\\u00A0'}</span>\n    }\n    \n    // Get Original Language Word Data\n    const word_metadata = (props.marks) ? props.marks.find(mark => mark.type === 'word_metadata') : undefined\n\n    // If it's just a chapter/verse reference then return that leaf with a reference\n    if (!word_metadata) {\n        return <span className={(classNames !== null) ? classNames : ''}>{props.text}</span>\n    }\n\n    // Check for paragraph breaks in the text string\n    let newLine = props.text.search('\\n')\n    // If there's a paragraph break, split the text string into two parts: text1 = word, text2 = paragraph break + white space (if any)\n    const text1 = (newLine !== -1)? props.text.substring(0,newLine): null\n    const text2 = (newLine !== -1)? props.text.substring(newLine) : null\n\n    if (newLine > -1) {\n        return (\n            <React.Fragment>\n                <span \n                    key={word_metadata.data.word_ID} \n                    className={styles.whitespace} \n                    onClick={() => updateDialog({open: !receivedAppContext.dialog.open, content: Object.assign(word_metadata.data, {text: props.text})})}\n                >\n                    <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{text1}</span>\n                    <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>{(!word_metadata.data.StrongNumber) ? '-' : word_metadata.data.StrongNumber}</span>\n                    <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>{(receivedAppContext.language === 'GRK') ? word_metadata.data.IT : word_metadata.data.ETCBCgloss}</span>\n                </span>\n                    {(!text2)?(<div className={styles.lineBreak}/>):(\n                    <React.Fragment>\n                        <div className={styles.lineBreak}/>\n                        <span key={word_metadata.data.word_ID} className={styles.whitespace}>\n                            <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{text2}</span>\n                            {/* <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>TEST</span>\n                            <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>TEST</span> */}\n                        </span>\n                    </React.Fragment>)}\n            </React.Fragment>\n        )\n    } else {\n        return (\n                <span \n                    key={word_metadata.data.word_ID} \n                    className={(receivedAppContext.language === 'GRK') ? styles.interlinearLeafGreek : styles.interlinearLeafHebrew} \n                    onClick={() => updateDialog({open: !receivedAppContext.dialog.open, content: Object.assign(word_metadata.data, {text: props.text})})}\n                    style={(word_metadata.data.StrongNumber === 'H4487') ? {backgroundColor: 'yellow'} : null}\n                >\n                    <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{props.text}</span>\n                    <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>{(word_metadata.data.StrongNumber !== '') ? word_metadata.data.StrongNumber : word_metadata.data.extendedStrongNumber}</span>\n                    <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>{(receivedAppContext.language === 'GRK') ? word_metadata.data.IT : word_metadata.data.ETCBCgloss}</span>\n                </span>\n        )\n    }\n}\n\nexport default InterlinearLeaf;","import React, { useContext } from 'react'\nimport styles from './Inlines.module.css'\nimport Leaf from '../Leaf/Leaf'\nimport InterlinearLeaf from '../Leaf/InterlinearLeaf'\nimport AppContext from '../../contextAPI/AppContext'\n\nconst Inlines = (props) => {\n    const receivedAppContext = useContext(AppContext)\n    if (props.type === 'prose') {\n        return (\n            <div className={styles.prose}>\n                {props.leaves.map(leaf => {\n                    if (receivedAppContext.interlinear) {\n                        return <InterlinearLeaf \n                        marks={leaf.marks}\n                        text={leaf.text}/>\n                    } else {\n                        return <Leaf \n                        marks={leaf.marks}\n                        text={leaf.text}/>\n                    }\n                })}\n            </div>\n        )\n    } else if (props.type === 'poetry') {\n        return (\n            <div className={styles.poetry}>\n                {props.leaves.map(leaf => {\n                    if (receivedAppContext.interlinear) {\n                        return <InterlinearLeaf \n                        marks={leaf.marks}\n                        text={leaf.text}/>\n                    } else {\n                        return <Leaf \n                        marks={leaf.marks}\n                        text={leaf.text}/>\n                    }\n                })}\n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nexport default Inlines","import React, { useContext } from 'react'\nimport SourceName from '../SourceName/SourceName'\nimport styles from \"./SpeechBubble.module.css\"\nimport Inlines from '../Inlines/Inlines'\nimport AppContext from '../../contextAPI/AppContext'\n\nconst SpeechBubble = (props) => {\n    const receivedAppContext = useContext(AppContext)\n\n    if (receivedAppContext.language === 'HBR') {\n        return (\n            <div className={styles.hebrew}>\n                <SourceName \n                    sourceName={props.sourceData.source}\n                    data={props.sourceData}\n                />\n                <div className={[styles.speechbubblehebrew, styles[props.sourceData.color]].join(' ')}>\n                {props.inlines.map(inline => {\n                    return <Inlines \n                    type={inline.type}\n                    leaves={inline.nodes}/>\n                })}\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div>\n                <SourceName \n                    sourceName={props.sourceData.source}\n                    data={props.sourceData}\n                />\n                <div className={[styles.speechbubble, styles[props.sourceData.color]].join(' ')}>\n                {props.inlines.map(inline => {\n                    return <Inlines \n                    type={inline.type}\n                    leaves={inline.nodes}/>\n                })}\n                </div>\n            </div>\n        )\n    }\n    \n    \n}\n\nexport default SpeechBubble;","import React from 'react'\nimport styles from './Paragraph.module.css'\n\nconst Paragraph = (props) => {\n    return (\n        <p>\n            {props.content[0].leaves.map(leaf => { \n                let classNames = []\n                if (leaf.marks) {\n                    if (leaf.marks.find(mark => mark.type === 'bold')) {\n                        classNames.push('bold')\n                    }\n                    if (leaf.marks.find(mark => mark.type === 'italic')) {\n                        classNames.push('italic')\n                    }\n                    if (leaf.marks.find(mark => mark.type === 'smallcaps')) {\n                        classNames.push('smallcaps')\n                    }\n                }\n                    return <span className={(classNames.length > 0) ? classNames.map(mark => styles[mark]).join(' ') : ''}>{leaf.text}</span>})\n            }\n        </p>\n    )\n}\n\nexport default Paragraph","import React from 'react'\nimport styles from './BulletedList.module.css'\n\nconst ListItem = (props) => {\n    return (<p className={styles.listItem}>\n        {props.content[0].leaves.map(leaf => {\n            let classNames = []\n            if (leaf.marks) {\n                if (leaf.marks.find(mark => mark.type === 'bold')) {\n                    classNames.push('bold')\n                }\n                if (leaf.marks.find(mark => mark.type === 'italic')) {\n                    classNames.push('italic')\n                }\n                if (leaf.marks.find(mark => mark.type === 'smallcaps')) {\n                    classNames.push('smallcaps')\n                }\n            }\n            return <span className={(classNames.length > 0) ? classNames.map(mark => styles[mark]).join(' ') : ''}>{leaf.text}</span>\n        })}\n    </p>)\n}\n\nconst BulletedList = (props) => {\n    return (\n        <ul style={{listStyle: 'none'}}>\n            {props.content.map(item => { \n                return <ListItem content={item.nodes} />\n            })}\n        </ul>\n    )\n}\n\nexport default BulletedList","import React from 'react'\nimport styles from './Subtitle.module.css'\n\nconst Subtitle = (props) => {\n    return (\n        <p>\n            {props.content[0].leaves.map(leaf => { \n                let classNames = ['subtitle']\n                if (leaf.marks) {\n                    if (leaf.marks.find(mark => mark.type === 'bold')) {\n                        classNames.push('bold')\n                    }\n                    if (leaf.marks.find(mark => mark.type === 'italic')) {\n                        classNames.push('italic')\n                    }\n                    if (leaf.marks.find(mark => mark.type === 'smallcaps')) {\n                        classNames.push('smallcaps')\n                    }\n                }\n                    return <span className={(classNames.length > 0) ? classNames.map(mark => styles[mark]).join(' ') : ''}>{leaf.text}</span>})\n            }\n        </p>\n    )\n}\n\nexport default Subtitle","import React from 'react'\nimport styles from './Introduction.module.css'\nimport Paragraph from './Paragraph/Paragraph'\nimport BulletedList from './BulletedList/BulletedList'\nimport Table from './Table/Table'\nimport Subtitle from './Subtitle/Subtitle'\n\nconst Introduction = (props) => {\n    return (\n        <div>\n            {props.content.map(block => {\n                switch (block.type) {\n                    case 'speech':\n                        return <Paragraph content={block.nodes} />\n                    case 'subtitle':\n                        return <Subtitle content={block.nodes} />\n                    case 'bulleted-list':\n                        return <BulletedList content={block.nodes} />\n                    case 'table':\n                        return <p style={{color: 'red'}}>TABLE WILL BE HERE!</p>\n                        // <Table content={block.nodes} />\n                    default:\n                        return null\n                }\n            })}\n        </div>\n    )\n}\n\nexport default Introduction","import React, { useContext } from 'react'\nimport styles from \"./NarratorText.module.css\"\nimport Inlines from '../Inlines/Inlines'\nimport SourceName from '../SourceName/SourceName'\nimport AppContext from '../../contextAPI/AppContext'\n\nconst NarratorText = (props) => {\n    const receivedAppContext = useContext(AppContext)\n\n    if (receivedAppContext.language === 'HBR') {\n        return (\n            <div className={styles.hebrew}>\n                <SourceName \n                    sourceName={props.sourceData.source}\n                    data={props.sourceData}\n                />\n                <div>\n                {props.inlines.map(inline => {\n                    return <Inlines \n                    type={inline.type}\n                    leaves={inline.nodes}/>\n                })}\n                </div>\n            </div>\n    )} else {\n        return (\n            <div>\n                <SourceName \n                    sourceName={props.sourceData.source}\n                    data={props.sourceData}\n                />\n                <div>\n                {props.inlines.map(inline => {\n                    return <Inlines \n                    type={inline.type}\n                    leaves={inline.nodes}/>\n                })}\n                </div>\n            </div>\n    )}\n}\n\nexport default NarratorText;","import React, { useEffect, useContext } from 'react'\nimport AppContext from '../contextAPI/AppContext'\nimport scrollToElement from 'scroll-to-element'\nimport SpeechBubble from '../components/SpeechBubble/SpeechBubble'\nimport Introduction from '../components/Introduction/Introduction'\nimport Narrator from '../components/NarratorText/NarratorText'\nimport '../components/Layout/layout.module.css'\n\nexport default ({pageContext: {segment}}) => {\n  const receivedAppContext = useContext(AppContext);\n  \n  // let scrollData = location.state\n  useEffect(() => {\n    if (typeof window !== undefined) {\n      \n      if (receivedAppContext.searchID !== '') {\n        const id = `#${receivedAppContext.searchID}`\n        console.log(id)\n        scrollToElement(id, {\n            offset: -65,\n            ease: 'inOutCube',\n            duration: 1500\n        });\n        receivedAppContext.updateSearchID('')\n      }\n    }\n  }, [])\n\n  return (\n    <div>\n      {/* segments start with an array of block nodes (so they have a length), but intros start with an object \"document\"  */}\n      {(segment.length) ? \n        segment.map(block => {\n          // const SVBData = {\n          //   color: block.data.color,\n          //   source: block.data.source\n          // }\n          if (block.data.color === 'black') {\n            return (<Narrator \n              sourceData={block.data}\n              inlines={block.nodes} />\n              )\n          } else {\n            return (<SpeechBubble \n              sourceData={block.data}\n              inlines={block.nodes} />\n              )\n          }\n        }) \n      : (\n        <Introduction content={segment.document.nodes} />\n      )}\n    </div>\n  )}"],"sourceRoot":""}