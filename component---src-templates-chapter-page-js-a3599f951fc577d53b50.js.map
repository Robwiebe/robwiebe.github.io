{"version":3,"sources":["webpack:///./src/components/Leaf/Leaf.js","webpack:///./src/components/Leaf/InterlinearLeaf.js","webpack:///./src/components/SourceName/SourceName.js","webpack:///./src/components/SpeechBubble/SpeechBubble.js","webpack:///./src/components/NarratorText/NarratorText.js","webpack:///./src/templates/ChapterPage.js"],"names":["Leaf","props","chapter","marks","find","mark","type","undefined","verse","classNames","styles","leaf","join","bibleRef","react_default","a","createElement","reference","data","book","className","text","InterlinearLeaf","dialog","useContext","DialogContext","updateDialog","obj","newDialog","interlinearLeaf","word_metadata","newLine","search","text1","substring","text2","Fragment","key","word_ID","whitespace","onClick","open","content","interlinearinterlinear","interlinearStrongs","StrongNumber","interlinearTranslation","IT","lineBreak","SourceName","sourceName","SpeechBubble","components_SourceName_SourceName","sourceData","source","speechbubble","color","leaves","map","interlinear","Leaf_InterlinearLeaf","components_Leaf_Leaf","NarratorText","__webpack_exports__","_ref","segment","pageContext","_useState","useState","updateInterlinear","prevURL","language","version","nextURL","contentJSON","JSON","parse","layout","document","nodes","block","SVBData","components_NarratorText_NarratorText","components_SpeechBubble_SpeechBubble"],"mappings":"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","file":"component---src-templates-chapter-page-js-a3599f951fc577d53b50.js","sourcesContent":["import React from 'react'\nimport styles from './Leaf.module.css'\n\nconst Leaf = (props) => {\n    // Create CSS styles from marks\n    const chapter = (props.marks) ? props.marks.find(mark => mark.type === 'chapter') : undefined\n    const verse = (props.marks) ? props.marks.find(mark => mark.type === 'verse') : undefined\n    const classNames = (verse !== undefined || chapter !== undefined) ? [(chapter !== undefined)?styles.chapter:null, (verse)?styles.verse:null, styles.leaf].join(' ') : styles.leaf\n    \n    // Create Bible references\n    let bibleRef = (verse) ? props.marks.find(mark => mark.type === 'reference') : undefined\n       if (bibleRef !== undefined) {\n        //  console.log(`bibleRef => ${bibleRef.data.book} ${bibleRef.data.chapter}:${bibleRef.data.verse}`)\n         return <span reference={`${bibleRef.data.book}.${bibleRef.data.chapter}.${bibleRef.data.verse}`} className={(classNames !== null) ? classNames : ''}>{props.text}</span>\n     } \n     // If not a verse, don't create a reference\n     else {\n        return <span className={(classNames !== null) ? classNames : ''}>{props.text}</span>\n     }\n     \n    }\n\nexport default Leaf;","import React, { useContext } from 'react'\nimport DialogContext from '../../contextAPI/dialog-context'\nimport styles from './InterlinearLeaf.module.css'\n\nconst InterlinearLeaf = (props) => {\n    // This controls the popup for the word information\n    const dialog = useContext(DialogContext);\n    const updateDialog = (obj) => {\n        dialog.newDialog(obj)\n    }\n\n    // Check if the leaf is a chapter or verse\n    const chapter = (props.marks) ? props.marks.find(mark => mark.type === 'chapter') : undefined\n    const verse = (props.marks) ? props.marks.find(mark => mark.type === 'verse') : undefined\n    const bibleRef = (verse || chapter) ? props.marks.find(mark => mark.type === 'reference') : undefined\n\n    //ClassNames Array\n    const classNames = (verse !== undefined || chapter !== undefined) ? \n        [\n            (chapter) ? styles.chapter : null, \n            (verse) ? styles.verse : null\n        ]\n        .join(' ') : styles.interlinearLeaf\n    \n    // If it's just a chapter/verse reference then return that leaf with a reference\n    if (verse || chapter) {\n        return <span reference={`${bibleRef.data.book}.${bibleRef.data.chapter}.${bibleRef.data.verse}`} className={(classNames !== null) ? classNames : ''}>{props.text}</span>\n    }\n    \n    // Get Original Language Word Data\n    const word_metadata = (props.marks) ? props.marks.find(mark => mark.type === 'word_metadata') : undefined\n    \n    // If it's just a chapter/verse reference then return that leaf with a reference\n    if (!word_metadata) {\n        return <span className={(classNames !== null) ? classNames : ''}>{props.text}</span>\n    }\n\n    // Check for paragraph breaks in the text string\n    let newLine = props.text.search('\\n')\n    // If there's a paragraph break, split the text string into two parts: text1 = word, text2 = paragraph break + white space (if any)\n    const text1 = (newLine !== -1)? props.text.substring(0,newLine): null\n    const text2 = (newLine !== -1)? props.text.substring(newLine) : null\n\n    if (newLine > -1) {\n        return (\n            <React.Fragment>\n                <span \n                    key={word_metadata.data.word_ID} \n                    className={styles.whitespace} \n                    onClick={() => updateDialog({open: !dialog.dialog.open, content: word_metadata.data})}\n                >\n                    <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{text1}</span>\n                    <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>{word_metadata.data.StrongNumber}</span>\n                    <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>{word_metadata.data.IT}</span>\n                </span>\n                    {(!text2)?(<div className={styles.lineBreak}/>):(\n                    <React.Fragment>\n                        <div className={styles.lineBreak}/>\n                        <span key={word_metadata.data.word_ID} className={styles.whitespace}>\n                            <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{text2}</span>\n                            {/* <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}></span>\n                            <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}></span> */}\n                        </span>\n                    </React.Fragment>)}\n            </React.Fragment>\n        )\n    } else {\n        return (\n                <span \n                    key={word_metadata.data.word_ID} \n                    className={styles.interlinearLeaf} \n                    onClick={() => updateDialog({open: !dialog.dialog.open, content: word_metadata.data})}\n                >\n                    <span key={word_metadata.data.word_ID + 'text'} className={styles.interlinearinterlinear}>{props.text}</span>\n                    <span key={word_metadata.data.word_ID + 'strong'} className={styles.interlinearStrongs}>{word_metadata.data.StrongNumber}</span>\n                    <span key={word_metadata.data.word_ID + 'gloss'} className={styles.interlinearTranslation}>{word_metadata.data.IT}</span>\n                </span>\n        )\n    }\n}\n\nexport default InterlinearLeaf;","import React from 'react'\nimport styles from './SourceName.module.css'\n\nconst SourceName = (props) => (\n    <p className={styles.sourceName}>{props.sourceName}</p>\n)\n\nexport default SourceName;","import React from 'react'\nimport Leaf from '../Leaf/Leaf'\nimport InterlinearLeaf from '../Leaf/InterlinearLeaf'\nimport SourceName from '../SourceName/SourceName'\nimport styles from \"./SpeechBubble.module.css\"\n\nconst SpeechBubble = (props) => {\n    // const hebrew = props.language === 'HBR'\n    return (\n        <div>\n            <SourceName sourceName={props.sourceData.source} />\n            <div className={[styles.speechbubble, styles[props.sourceData.color]].join(' ')}>\n            {props.leaves.map(leaf => {\n                if (props.interlinear) {\n                    return <InterlinearLeaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                } else {\n                    return <Leaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                }\n            })}\n            </div>\n        </div>\n    )\n    \n}\n\nexport default SpeechBubble;","import React from 'react'\nimport Leaf from '../Leaf/Leaf'\nimport InterlinearLeaf from '../Leaf/InterlinearLeaf'\nimport SourceName from '../SourceName/SourceName'\n\nconst NarratorText = (props) => {\n    // const hebrew = props.language === 'HBR'\n    return (\n        <div>\n            <SourceName sourceName={props.sourceData.source} />\n            <div>\n            {props.leaves.map(leaf => {\n                if (props.interlinear) {\n                    return <InterlinearLeaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                } else {\n                    return <Leaf \n                    marks={leaf.marks}\n                    text={leaf.text}/>\n                }\n            })}\n            </div>\n        </div>\n)}\n\nexport default NarratorText;","import React, { useState } from 'react'\n// import { graphql } from \"gatsby\"\nimport SpeechBubble from '../components/SpeechBubble/SpeechBubble'\nimport Narrator from '../components/NarratorText/NarratorText'\nimport Layout from \"../components/Layout/layout\"\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nexport default ({pageContext: {segment}}) => {\n\n  const [ interlinear, updateInterlinear] = useState(false)\n  \n  const prevURL = `/Reader/${segment.language}/${segment.version}/${segment.book}/${segment.chapter -1}`\n  const nextURL = `/Reader/${segment.language}/${segment.version}/${segment.book}/${segment.chapter +1}`\n\n  // convert string into JSON\n  const contentJSON = JSON.parse(segment.content)\n\n  return (\n    <Layout \n      prevURL={prevURL} \n      nextURL={nextURL} \n      interlinear={() => updateInterlinear(!interlinear)}\n      version={segment.version}\n    >\n      {contentJSON.document.nodes.map(block => {\n        const SVBData = {\n          color: block.data.color,\n          source: block.data.source\n        }\n        if (SVBData.color === 'black') {\n          return (<Narrator \n            sourceData={SVBData}\n            leaves={block.nodes[0].leaves}\n            interlinear={interlinear} />\n            )\n        } else {\n          return (<SpeechBubble \n            sourceData={SVBData}\n            leaves={block.nodes[0].leaves}\n            interlinear={interlinear} />\n            )\n        }\n      })}\n    </Layout>\n  )}"],"sourceRoot":""}